#include "Buffer.h"

void Backspace(Buffer *TextBuffer) {
  if (TextBuffer->LeftIndex > 0) {
    TextBuffer->LeftIndex--;
    TextBuffer->Text[TextBuffer->LeftIndex] = '\0';
  }
}

void Insert(Buffer *TextBuffer, i8 CharToAdd) {
  if (!TextBuffer->Text[TextBuffer->LeftIndex] &&
      (TextBuffer->LeftIndex != TextBuffer->RightIndex)) {
    TextBuffer->Text[TextBuffer->LeftIndex] = CharToAdd;
    TextBuffer->LeftIndex++;
  }
}

void MoveCursor(Buffer *TextBuffer, i32 Direction) {
  if (TextBuffer->LeftIndex > TextBuffer->RightIndex) {
    return;
  }
  
  if ((Direction == KEY_LEFT) && RANGE_EXCL(TextBuffer->LeftIndex, 0, 14)) {
    TextBuffer->Text[TextBuffer->RightIndex] = TextBuffer->Text[TextBuffer->LeftIndex - 1];
    TextBuffer->Text[TextBuffer->LeftIndex - 1] = '\0';
    TextBuffer->LeftIndex--;
    TextBuffer->RightIndex--;
  } else if ((Direction == KEY_RIGHT) && RANGE_EXCL(TextBuffer->RightIndex, 0, 14)) {
    TextBuffer->Text[TextBuffer->LeftIndex] = TextBuffer->Text[TextBuffer->RightIndex + 1];
    TextBuffer->Text[TextBuffer->RightIndex + 1] = '\0';
    TextBuffer->LeftIndex++;
    TextBuffer->RightIndex++;
  }
}

i8 *PrintBuffer(Buffer *TextBuffer) {
  i8 *ToPrint = calloc(16, sizeof(i8));
  i32 WriteIndex = 0;
  ToPrint[15] = '\0';
  for (u32 Index = 0; Index < 15; Index++) {
    if (TextBuffer->Text[Index]) {
      ToPrint[WriteIndex] = TextBuffer->Text[Index];
      WriteIndex++;
    }
  }
  return ToPrint;
}
